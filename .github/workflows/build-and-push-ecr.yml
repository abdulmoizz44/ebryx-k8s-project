name: Build and Push to ECR

on:
  push:
    branches: [ main ]

  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: k8s-assessment
  ECR_REGISTRY: 084828598848.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ./app

    - name: SonarCloud Quality Gate Check
      id: quality-gate
      run: |
        echo "⏳ Waiting for SonarCloud Quality Gate..."
        
        # Extract task URL from scanner work directory
        TASK_URL=$(cat ./app/.scannerwork/report-task.txt | grep ceTaskUrl | cut -d'=' -f2)
        echo "Task URL: $TASK_URL"
        
        # Wait for analysis to complete (max 5 minutes)
        for i in {1..60}; do
          sleep 5
          TASK_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$TASK_URL" | jq -r '.task.status')
          echo "Analysis status: $TASK_STATUS (attempt $i/60)"
          
          if [ "$TASK_STATUS" = "SUCCESS" ]; then
            echo "✅ Analysis completed successfully"
            break
          elif [ "$TASK_STATUS" = "FAILED" ] || [ "$TASK_STATUS" = "CANCELLED" ]; then
            echo "❌ Analysis failed with status: $TASK_STATUS"
            exit 1
          fi
          
          if [ $i -eq 60 ]; then
            echo "❌ Timeout waiting for analysis to complete"
            exit 1
          fi
        done
        
        # Get project status and Quality Gate
        PROJECT_STATUS_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=abdulmoizz44_ebryx-k8s-project"
        QUALITY_GATE_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$PROJECT_STATUS_URL" | jq -r '.projectStatus.status')
        
        echo "🎯 Quality Gate Status: $QUALITY_GATE_STATUS"
        
        if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
          echo "✅ Quality Gate PASSED! Proceeding with deployment..."
        else
          echo "❌ Quality Gate FAILED! Status: $QUALITY_GATE_STATUS"
          echo "🔗 Check details at: https://sonarcloud.io/project/overview?id=abdulmoizz44_ebryx-k8s-project"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: false

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./app
      run: |
        IMAGE_TAG=${GITHUB_SHA:0:6}
        
        echo "Building Docker image with tag: $IMAGE_TAG"
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing image with commit SHA: $IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Pushing latest tag..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image-latest=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
        echo "commit-sha=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name ${{ secrets.EKS_CLUSTER_NAME }}
        kubectl config current-context

    - name: Deploy to EKS using Helm
      run: |
        IMAGE_TAG=${GITHUB_SHA:0:6}
        
        echo "Deploying with image tag: $IMAGE_TAG"
        
        cd simple-helm/flask-app
        
        # Update the image tag in values.yaml and deploy
        helm upgrade --install flask-health-app . \
          --set image.tag=$IMAGE_TAG \
          --namespace flask-app \
          --create-namespace \
          --wait \
          --timeout=300s
        
        echo "Deployment completed successfully!"
        
        # Verify deployment
        kubectl get pods -l app=flask-health-app
        kubectl get services flask-health-app

