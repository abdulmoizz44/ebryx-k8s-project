apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.appName }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      containers:
      - name: flask-app
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        
        # Environment variables
        env:
        - name: FLASK_ENV
          value: "{{ .Values.env.FLASK_ENV }}"
        - name: LOG_LEVEL
          value: "{{ .Values.env.LOG_LEVEL }}"
        - name: PORT
          value: "{{ .Values.env.PORT }}"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.appName }}-secrets
              key: DATABASE_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.appName }}-secrets
              key: SECRET_KEY
        
        # Resource limits
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /failcheck
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
